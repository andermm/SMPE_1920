#!/bin/bash
#SBATCH --job-name=exp
#SBATCH --time=72:00:00
#SBATCH --nodes=4
#SBATCH --tasks-per-node=32
#SBATCH --ntasks=128
#SBATCH --partition=hype
#SBATCH --exclusive
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err

BASE=$HOME/SMPE_1920
PROGRAM_BIN=$BASE/NPB3.4/NPB3.4-MPI/bin
PROGRAM_CONFIG=$BASE/NPB3.4/NPB3.4-MPI/config
PROGRAM_COMPILE=$BASE/NPB3.4/NPB3.4-MPI
START=`date +"%d-%m-%Y.%Hh%Mm%Ss"`
LOGS_DIR=$BASE/LOGS
OUTPUT=$LOGS_DIR/npb.$START.csv
DoE=$BASE/R/DoE.R
PARTITION=hype

#1 - Executes the system information collector script

for (( i = 1; i < 5; i++ )); do
	ssh $PARTITION${i} '/home/users/ammaliszewski/SMPE_1920/BATCH/./sys_info_collect.sh'
done

#2 - Install de dependencies, download and compile NPB
cd $BASE

wget https://www.nas.nasa.gov/assets/npb/NPB3.4.tar.gz
tar -zxvf NPB3.4.tar.gz
rm -rf NPB3.4.tar.gz

for f in $PROGRAM_CONFIG/*.def.template; do
	mv -- "$f" "${f%.def.template}.def"; 
done

sed -i 's,mpif90,mpifort,g' $PROGRAM_CONFIG/make.def

apps=(bt ep cg mg sp lu is ft)
classes=(D)
echo -n "" > $PROGRAM_CONFIG/suite.def

#Insert app and class in suite.def
for (( n = 0; n < 8; n++ )); do
	for (( i = 0; i < 1; i++ )); do
		echo -e ${apps[n]}"\t"${classes[i]} >> $PROGRAM_CONFIG/suite.def
	done
done

##Compile NPB
cd $PROGRAM_COMPILE; make suite; cd $BASE

mkdir -p $BASE/LOGS/BACKUP

##Define the machine file for MPI
MACHINEFILE_POWER_OF_2=$LOGS_DIR/nodes_power_of_2
MACHINEFILE_SQUARE_ROOT=$LOGS_DIR/nodes_square_root
#srun $SRUN_PACK /bin/hostname | sort -n | awk "{print $2}" > $MACHINEFILE

#Generate the experimental project
Rscript $DoE

# Check if the experimental project is provided
PROJECT=$BASE/R/experimental_project.csv
if [[ -f $PROJETO ]]; then
  echo "The experimental project is provided"
else
  echo "The experimental project is missing !"
  exit
fi

#2 - Read the experimental project
tail -n +2 $PROJECT |
while IFS=\; read -r name apps interface Blocks
do
	#Clean the values
	export name=$(echo $name | sed "s/\"//g")
	export apps=$(echo $apps | sed "s/\"//g")
	export interface=$(echo $interface | sed "s/\"//g")

	##Define a single key
	KEY="$name-${apps:0:2}-$interface"
	
	echo $KEY

	##Prepare the command for execution
	runline=""
	runline+="mpirun --mca btl self,"

	if [[ $interface == ib ]]; then
		runline+="openib --mca btl_openib_if_include mlx5_0:1 "	
	fi

	if [[ $interface == ipoib ]]; then
		runline+="tcp --mca btl_tcp_if_include ib0 "
	fi

	if [[ $interface == eth ]]; then
		unline+="tcp --mca btl_tcp_if_include eno2 "
	fi

	if [[ $apps == bt.D.x || $apps == sp.D.x ]]; then
		PROCS=121
		runline+="-np $PROCS -machinefile $MACHINEFILE_SQUARE_ROOT "
	else 
		PROCS=128
		runline+="-np $PROCS -machinefile $MACHINEFILE_POWER_OF_2 "
	fi
	runline+="$PROGRAM_BIN/$apps "
	runline+="2>> $LOGS_DIR/nas.err "
	runline+="&> >(tee -a $LOGS_DIR/BACKUP/${apps:0:3}$interface.log > /tmp/nas.out)"
	
	##Execute the experiments
	echo "Running >> $runline <<"
	eval "$runline < /dev/null"

	TIME=`grep -i "Time in seconds" /tmp/nas.out | awk {'print $5'}`
	echo "${apps:0:2},$interface,$TIME" >> $OUTPUT
	echo "Done!"
done
sed -i '1s/^/apps,interface,time\n/' >> $OUTPUT
exit


#IpoIB
#mpirun -np 128 --mca btl self,tcp --mca btl_tcp_if_include ib0 \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#/home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.C.x

#Ethernet
#mpirun -np 128 --mca btl self,tcp --mca btl_tcp_if_include eno2 \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#/home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.D.x

#Infiniband
#mpirun -np 128 --mca btl self,openib \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#--mca btl_openib_if_include mlx5_0:1 /home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.D.x