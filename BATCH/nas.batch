#!/bin/bash
#SBATCH --job-name=exp
#SBATCH --time=72:00:00
#SBATCH --nodes=4
#SBATCH --tasks-per-node=32
#SBATCH --ntasks=128
#SBATCH --partition=hype
#SBATCH --exclusive
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err

BASE=$HOME/SMPE_1920
PROGRAM_BIN=$BASE/NPB3.4/NPB3.4-MPI/bin
PROGRAM_CONFIG=$BASE/NPB3.4/NPB3.4-MPI/config
PROGRAM_COMPILE=$BASE/NPB3.4/NPB3.4-MPI
START=`date +"%d-%m-%Y.%Hh%Mm%Ss"`
LOGS_DIR=$BASE/LOGS
OUTPUT=$LOGS_DIR/npb.$START.csv
PROJECT=$BASE/R/experimental_project.csv
PROCS=128

cd $BASE

#Collect system information
./CONTROL/enviroment_control.sh

#Download, configure and compile NPB.
wget https://www.nas.nasa.gov/assets/npb/NPB3.4.tar.gz
tar -zxvf NPB3.4.tar.gz

for f in $PROGRAM_CONFIG/*.def.template; do
	mv -- "$f" "${f%.def.template}.def"; 
done

sed -i 's,mpif90,mpifort,g' $PROGRAM_CONFIG/make.def

kernel=(bt ep cg mg sp lu is ft)
classes=(C D)
echo -n "" > $PROGRAM_CONFIG/suite.def

#Insert kernel and class in suite.def
for (( n = 0; n < 8; n++ )); do
	for (( i = 0; i < 2; i++ )); do
		echo -e ${kernel[n]}"\t"${classes[i]} >> $PROGRAM_CONFIG/suite.def
	done
done

#Install the dependencies
nome=(gfortran libopenmpi-dev)
for (( n = 0; n < 2; n++ )); do
	packets=$(dpkg --get-selections | grep ${nome[n]})
	if [ -n "$packets" ];
		then
			echo All necessary packets are installed!
		else
			sudo apt install ${nome[n]} -y
	fi
done

#Compile NPB
cd $PROGRAM_COMPILE; make suite; cd $BASE

# Create the for the results
#mkdir -p $BASE/LOGS
mkdir -p $BASE/LOGS/BACKUP

#Define the machine file for MPI
MACHINEFILE_POWER_OF_2=$LOGS_DIR/nodes_power_of_2
MACHINEFILE_SQUARE_ROOT=$LOGS_DIR/nodes_power_of_2
#srun $SRUN_PACK /bin/hostname | sort -n | awk "{print $2}" > $MACHINEFILE

#Read the experimental project
tail -n +2 $PROJECT |
	while IFS=\; read -r name kernels btl Blocks
do
	#Clean the values
	export name=$(echo $name | sed "s/\"//g")
	export kernels=$(echo $kernels | sed "s/\"//g")
	export btl=$(echo $btl | sed "s/\"//g")

	# Define a single key
	KEY="$name-${kernels:0:2}-$INTERFACE"
	
	echo $KEY

	# Prepare the command for execution
	runline=""
	runline+="mpirun -np $PROCS --mca btl self,$btl "
	if [[ $btl == openib ]]; then
		runline+="--mca btl_openib_if_include mlx5_0:1 "
		INTERFACE=IB
	else if [[ $btl ==  tcp --mca btl_tcp_if_include ib0 ]]; then
		INTERFACE=IPoIB
	else 
		INTERFACE=ETH
	fi

	if [[ $kernels == bt.D.x || $kernels == sp.D.x ]]; then
		runline+="-machinefile $MACHINEFILE_SQUARE_ROOT "
	else 
		runline+="-machinefile $MACHINEFILE_POWER_OF_2 "
	fi
	runline+="$PROGRAM_BIN/$kernels "
	runline+="2>> $LOGS_DIR/nas.err"
	runline+=" &> >(tee -a $LOGS_DIR/BACKUP/$kernels.$INTERFACE.log > /tmp/nas.out)"
	

	# 3.3 Execute the experiments
	echo "Running >> $runline <<"
	eval "$runline < /dev/null"

	TIME=`grep -i "Time in seconds" /tmp/nas.out | awk {'print $5'}`
	echo "kernel,input,interface,time"
		echo "${kernels:0:2},$INTERFACE,$TIME" >> $OUTPUT
	echo "Done!"
done
exit


#IpoIB
#mpirun -np 128 --mca btl self,tcp --mca btl_tcp_if_include ib0 \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#/home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.C.x

#Ethernet
#mpirun -np 128 --mca btl self,tcp --mca btl_tcp_if_include eno2 \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#/home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.D.x

#Infiniband
#mpirun -np 128 --mca btl self,openib \
#-machinefile /home/users/ammaliszewski/SMPE_1920/LOGS/nodes_power_of_2 \
#--mca btl_openib_if_include mlx5_0:1 /home/users/ammaliszewski/SMPE_1920/NPB3.4/NPB3.4-MPI/bin/ft.D.x